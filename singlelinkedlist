// DSA--SingleLinkedList
public class singlelinkedlist
{
	public static void main(String[] args) 
	{
	    LinkedList list=new LinkedList();
	    list.add(10);
	    list.add(20);
	    list.add(30);
	    list.add(50);
	    list.add(80);
	    list.add(50);
	    list.printlist();
	    list.search(400);
	    list.insertfirst(05);
	    list.printlist();
	    list.insertvalue(0,100);
	    System.out.println("After insert Element in index.");
	    list.printlist();
	    System.out.println(" insert arr Element in index.");
	    int arr[]={1,2,3,4};
	    list.addall(arr);
	    list.removefirst();
	    System.out.println("After remove Element");
	    list.printlist();
	    list.removelast();
	    list.printlist();
	    System.out.println(list.indexof(10));
	    System.out.println(list.lastindexof(50));
	    
	}
	
}
class Node
{
    int data;
    Node next;
    Node(int data)
    {
        this.data=data;
        this.next=null;
    }
}
class LinkedList 
{
    Node head;
    public void printlist()
	{
	    Node temp=head;
	    while(temp!=null)
	    {
	        System.out.print(temp.data+" ");
	        temp=temp.next;
	    }
	}
	public void add(int data)
	{
	    Node temp=new Node(data);
	    if(head==null)
	    {
	        head=temp;
	    }
	    else
	    {
	        Node curr=head;
	        while(curr.next!=null)
	        {
	            curr=curr.next;
	        }
	        curr.next=temp;
	    }
	}
	public void search(int data)
	{
	    Node temp=head;
	    while(temp.next!=null)
	    {
	        if(temp.data==data)
	        {
	            System.out.println("Element present");
	            break;
	        }
	        temp=temp.next;
	    }
	    System.out.println("Element is not present");
	}
	public void insertfirst(int data)
	{
	    Node temp=new Node(data);
	    if(head==null)
	    {
	        head=temp;
	    }
	    else{
	        temp.next=head;
	        head=temp;
	    }
	}
	public void insertvalue(int i, int value)
	{
	    if(i==0)
	    {
	        insertfirst(value);
	    }
	    else{
	        Node temp=new Node(value);
	        Node curr=this.head;
	        int count=0;
	        while(count<i-1)
	        {
	            curr=curr.next;
	            count++;
	        }
	        temp.next=curr.next;
	        curr.next=temp;
	    }
	}
	public void addall(int arr[])
	{
	    for(int i:arr)
	    {
	        add(i);
	    }
	}
	public void removefirst()
	{
	    if(head==null)
	    {
	        System.out.println("List is empty");
	    }
	    else if(head.next==null)
	    {
	        head=null;
	    }
	    else if(head.next!=null)
	    {
	        Node temp=head;
	        head=head.next;
	        temp=null;
	    }
	}
	public void removelast()
	{
	    if(head==null)
	    {
	        System.out.println("list is empty.");
	    }
	    else if(head.next==null)
	    {
	        head=null;
	    }
	    else if(head.next!=null)
	    {
	        Node temp=head;
	        while(temp.next.next!=null)
	        {
	            temp=temp.next;
	        }
	        temp.next=null;
	    }
	}
	public int indexof(int data)
	{
	    Node temp=head;
	    int index=0;
	    while(temp!=null)
	    {
	        if(temp.data==data)
	        {
	            return index;
	        }
	        temp=temp.next;
	        index++;
	    }
	    return -1;
	}
	public int lastindexof(int value)
	{
	    Node temp=head;
	    int count=0;
	    int index=-1;
	    while(temp!=null)
	    {
	        if(temp.data==value)
	        {
	             index=count;
	        }
	        temp=temp.next;
	        count++;
	    }
	    return index;
	} 
}
